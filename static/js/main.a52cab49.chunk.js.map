{"version":3,"sources":["components/Header.jsx","components/GameField.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Header","className","React","Component","GameField","goFullscreen","props","fullscreen","changeDirection","e","direction","state","code","setState","gameTableInit","arr","arrSn","y","fieldY","push","x","fieldX","Math","floor","pop","fieldXxY","snake","snakeSpeed","snakeSpeedInit","snakeDraw","map","item","subitem","index","i","includes","toString","playSound","sound","isSound","play","startGame","autoPlayIsRunning","audioBut","audioStart","finishTheGame","settingsOpen","gameIsOver","score","hiScore","gameIsRunning","prevState","isPaused","setTimeout","createFood","foodTimer","snakeTimer","setInterval","move","obstacles","obstacleTimer","createObstacle","obstacleInt","obstaclesDisap","noObstacleTimer","deleteObstacle","noObstacleInt","autoplayTimer","autoplay","autoplayInt","food","length","split","foodList","audioFood","createFoodOrObstacle","random","audioBomb","obstaclesArr","splice","food_x","food_y","fieldNumber","coord","headNew","noWalls","head","newx","newy","parseInt","audioPunch","finAudio","boom","audioEat","audioExp","arr2","clearInterval","audioLose","fieldSizeChanged","target","value","soundCheckHandler","wallsCheckHandler","document","getElementById","style","border","obstaclesCheckHandler","obstaclesDisapCheckHandler","obstaclesDisappCheckHandler","setRadioValue","radioValue","console","log","setSnakeSpeed","s","speedSetting","pauseGame","startGameClick","FSmodeOn","autoPlayStartInt","this","addEventListener","getElementsByClassName","id","Button","variant","onClick","disabled","aria-controls","aria-expanded","Collapse","in","ButtonGroup","toggle","name","radio","idx","ToggleButton","type","checked","onChange","currentTarget","src","Footer","href","alt","height","App","handle","useFullScreenHandle","useState","fsMode","enter","ReactDOM","render"],"mappings":"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","file":"static/js/main.a52cab49.chunk.js","sourcesContent":["import React from 'react';\n\nimport '../styles/Header.css';\n\nexport default class Header extends React.Component {\n    render() {\n        return <div className='header'>\n            <h1>Snake Game</h1>\n            <span>Use the arrow keys or W/A/S/D to play</span><br></br>\n            <span>Double click the game field to go fullscreen</span>\n        </div>\n    }\n}","import React from 'react';\n\nimport '../styles/GameField.css';\n\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Collapse from 'react-bootstrap/Collapse';\n\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nexport default class GameField extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            foodList: [2, 11, 12, 13, 14, 15, 16, 17, 18 ,19],\n            fieldX: 15,\n            fieldY: 15,\n            fieldXxY: [],\n            snake: [],\n            obstaclesArr: [],\n            snakeSpeedInit: 300,     \n            snakeSpeed: 0,   \n            foodTimer: 1000,       \n            obstacleInt: 7000,\n            noObstacleInt: 11000,\n            direction: 'x+',\n            gameIsRunning: false,   \n            snakeTimer: null,       \n            obstacleTimer: null,\n            noObstacleTimer: null,\n            hiScore: 0,       \n            score: 0,\n            obstacles: true,\n            obstaclesDisap: true,\n            noWalls: true,\n\n            radioValue: '15x15',\n            settingsOpen: false,\n\n            audioExp: null,\n            audioBut: null,\n            audioEat: null,\n            audioPunch: null,\n            audioBomb: null,\n            audioFood: null,\n            audioStart: null,\n            audioLose: null,\n\n            speedSetting: 50,\n            isPaused: true,\n            isSound: true,\n\n            gameIsOver: false,\n            autoPlayIsRunning: false,\n            autoplayTimer: null,\n            autoplayInt: 100,\n            FSmodeOn: false,\n\n            autoPlayStartInt: 3000\n\n        };\n    }\n\n    componentDidMount() {\n        \n        this.gameTableInit();\n        document.addEventListener('keydown', this.changeDirection);\n        document.getElementById(\"game-table\").addEventListener('dblclick', this.goFullscreen);\n        \n        this.setState({audioStart: document.getElementsByClassName(\"audio-start\")[0]});\n        this.setState({audioExp: document.getElementsByClassName(\"audio-element\")[0]});\n        this.setState({audioBut: document.getElementsByClassName(\"audio-button\")[0]});\n        this.setState({audioEat: document.getElementsByClassName(\"audio-eat\")[0]});\n        this.setState({audioPunch: document.getElementsByClassName(\"audio-punch\")[0]});\n        this.setState({audioBomb: document.getElementsByClassName(\"audio-bomb\")[0]});\n        this.setState({audioFood: document.getElementsByClassName(\"audio-food\")[0]});\n        this.setState({audioLose: document.getElementsByClassName(\"audio-lose\")[0]});\n\n        document.getElementById(\"game-table\").style.border = this.state.noWalls ? 'none' : '5px solid red';\n        //autoplaystart\n        // setTimeout(\n        //     () => {\n        //         this.startGame();\n        //         this.setState({autoplayTimer: setInterval(this.autoplay, this.state.autoplayInt)});\n        //     }\n        //     , this.state.autoPlayStartInt);\n    }\n\n    goFullscreen = () => {\n        this.props.fullscreen();\n    }\n\n    changeDirection = (e) => {\n        let {direction} = this.state;\n        // eslint-disable-next-line\n        switch (e.code) {\n            case 'ArrowLeft': \n            case 'KeyA':\n                if (direction !== 'x+') {\n                    direction = 'x-'\n                }\n                break;\n            case 'ArrowUp': \n            case 'KeyW':\n                if (direction !== 'y-') {\n                    direction = 'y+'\n                }\n                break;\n            case 'ArrowRight':\n            case 'KeyD':\n                if (direction !== 'x-') {\n                    direction = 'x+'\n                }\n                break;\n            case 'ArrowDown': \n            case 'KeyS':\n                if (direction !== 'y+') {\n                    direction = 'y-'\n                }\n                break;\n        }\n        this.setState({direction: direction});\n    }\n\n    gameTableInit = () => {\n        let arr = [[]];\n        let arrSn = [];\n        for(let y = 0; y < this.state.fieldY; y++) {\n            arr.push([]);\n            for(let x = 0; x < this.state.fieldX; x++) {\n                arr[y].push(0);\n            }\n        }\n        let y = Math.floor(this.state.fieldY / 2);\n        let x = Math.floor(this.state.fieldX / 2);\n        arr[y][x] = arr[y][x + 1] = 1;    \n        arr.pop();            \n        this.setState({fieldXxY: arr});\n        arrSn.push(`${y}-${x}`, `${y}-${x + 1}`)\n        this.setState({snake: arrSn});\n        this.setState({snakeSpeed: this.state.snakeSpeedInit})\n    }\n\n    snakeDraw =() => {\n        let arr = this.state.fieldXxY.map((item) => {\n            const i = item;\n            return (\n                i.map((subitem) => {\n                    return (\n                        subitem === 1 ? 0 : subitem\n                    )\n                })\n            )\n        })\n        arr = arr.map((item, index) => {\n            return (\n                item.map((subitem, i) => {\n                    return (\n                        this.state.snake.includes(`${index.toString()}-${i.toString()}`) ? 1 : subitem\n                    )\n                })\n            )\n        })\n        this.setState({fieldXxY: arr});\n    }\n\n    playSound = (sound) => {\n        if (this.state.isSound) {\n            sound.play();\n        }\n    }\n\n    startGame = () => {\n        if (!this.state.autoPlayIsRunning) {\n            this.playSound(this.state.audioBut);\n            this.playSound(this.state.audioStart);\n\n            this.finishTheGame();\n\n            this.setState({settingsOpen: false});\n            this.setState({gameIsOver: false});\n            this.setState({score: 0});\n            this.setState({hiScore: this.state.hiScore < this.state.score ? this.state.score : this.state.hiScore})\n            this.setState({gameIsRunning: true});\n            this.setState((prevState) => ({ isPaused: true }));\n        }\n        \n        this.gameTableInit();\n        this.setState({direction: 'x+'})\n\n        setTimeout(this.createFood, this.state.foodTimer);\n\n        this.setState({snakeTimer: setInterval(this.move, this.state.snakeSpeed)});        \n        if (this.state.obstacles) {\n            this.setState({obstacleTimer: setInterval(this.createObstacle, this.state.obstacleInt)});\n        }\n        if (this.state.obstaclesDisap) {\n            this.setState({noObstacleTimer: setInterval(this.deleteObstacle, this.state.noObstacleInt)});\n        }\n\n        if (this.state.autoPlayIsRunning) {\n            this.setState({autoplayTimer: setInterval(this.autoplay, this.state.autoplayInt)});\n        }\n    }\n\n    autoplay = () => {\n        let fieldXxY = this.state.fieldXxY;\n        let food = [];\n        let snake = [+this.state.snake[this.state.snake.length - 1].split('-')[0], +this.state.snake[this.state.snake.length - 1].split('-')[1]]\n\n        for (let y = 0; y < this.state.fieldY; y++) {\n            for (let x = 0; x < this.state.fieldX; x++) {\n                if (this.state.foodList.includes(fieldXxY[y][x])) {\n                    food = [];\n                    food.push(y, x);\n                }\n            }\n        }\n        // eslint-disable-next-line\n        switch(this.state.direction) {\n            case 'x+':\n                if (food[1] <= snake[1]) {\n                    if (food[0] > snake[0]) {\n                        this.setState({direction: 'y-'})\n                    } else \n                        {\n                        this.setState({direction: 'y+'})\n                    }\n                }\n                break;\n            case 'x-':\n                if (food[1] >= snake[1]) {\n                    if (food[0] < snake[0]) {\n                        this.setState({direction: 'y+'})\n                    } else \n                        {\n                        this.setState({direction: 'y-'})\n                    }\n                }\n                break;\n            case 'y+':\n                if (food[0] >= snake[0]) {\n                    if (food[1] > snake[1]) {\n                        this.setState({direction: 'x+'})\n                    } else \n                        {\n                        this.setState({direction: 'x-'})\n                    }\n                }\n                break;\n            case 'y-':\n                if (food[0] <= snake[0]) {\n                    if (food[1] > snake[1]) {\n                        this.setState({direction: 'x+'})\n                    } else \n                        {\n                        this.setState({direction: 'x-'})\n                    }\n                }\n                break;\n        }\n\n    }\n\n    createFood = () => {\n        this.playSound(this.state.audioFood);\n        this.createFoodOrObstacle(this.state.foodList[Math.floor(Math.random() * this.state.foodList.length)]);\n    }\n\n    createObstacle = () => {\n        this.playSound(this.state.audioBomb);\n        this.createFoodOrObstacle(3);\n    }\n\n    deleteObstacle = () => {\n        let {obstaclesArr, fieldXxY} = this.state;\n        let i = Math.floor(Math.random() * obstaclesArr.length);\n        fieldXxY[obstaclesArr[i].split('-')[0]][obstaclesArr[i].split('-')[1]] = 0;\n        obstaclesArr.splice(i, 1);\n        this.setState({obstaclesArr: obstaclesArr});\n        this.setState({fieldXxY: fieldXxY});\n    }\n\n    createFoodOrObstacle = (item) => {\n        let arr = this.state.fieldXxY;\n        while (1) { \n            var food_x = Math.floor(Math.random() * this.state.fieldX);\n            var food_y = Math.floor(Math.random() * this.state.fieldY);\n            if (arr[food_y][food_x] === 0) {\n                arr[food_y][food_x] = item;\n                break;\n            }\n        }\n        if (item === 3) {\n            this.setState({obstaclesArr: [...this.state.obstaclesArr, `${food_y}-${food_x}`]});\n        }\n        this.setState({fieldXxY: arr});\n    }\n\n    fieldNumber = (coord) => {\n        let [y, x] = [...coord.split('-')];\n        return (this.state.fieldXxY[+y][+x]);\n    }\n\n    move = () => {\n        let {direction, snake, noWalls} = this.state;\n        let head = snake[snake.length - 1].split('-');\n        let headNew = '';\n        let newx = head[1];\n        let newy = head[0];\n        // eslint-disable-next-line\n        switch (direction) {\n            case 'x-':\n                newx = parseInt(head[1]) - 1;\n                break;\n            case 'x+':\n                newx = parseInt(head[1]) + 1;\n                break;\n            case 'y+':\n                newy = parseInt(head[0]) - 1;\n                break;\n            case 'y-':\n                newy = parseInt(head[0]) + 1;\n                break;\n        }\n        if (newx > (this.state.fieldX - 1) || \n            newx < 0 ||\n            newy > (this.state.fieldY - 1) || \n            newy < 0) {\n                if (noWalls) {\n                    if (newx > this.state.fieldX - 1) {newx = 0};\n                    if (newx < 0) {newx = this.state.fieldX - 1};\n                    if (newy > this.state.fieldY - 1) {newy = 0};\n                    if (newy < 0) {newy = this.state.fieldY - 1};\n                } else {\n                    this.playSound(this.state.audioPunch);\n                    this.finishTheGame();\n                    setTimeout(this.finAudio, 2000);\n                }\n        } \n        headNew = `${newy}-${newx}`;\n        if (snake.includes(headNew)) {\n            this.playSound(this.state.audioPunch);\n            this.finishTheGame();\n            setTimeout(this.finAudio, 2000);\n        }\n        let arr = snake;\n        arr.push(headNew);\n        this.setState({snake: arr})\n        if (this.fieldNumber(headNew) === 3) {\n            this.boom(headNew);\n            this.finishTheGame();\n            setTimeout(this.finAudio, 2000);\n        }\n        if (this.state.foodList.includes(this.fieldNumber(headNew))) {\n            this.playSound(this.state.audioEat);\n            setTimeout(this.createFood, this.state.foodTimer);\n            if (this.state.gameIsRunning) {\n                this.setState({score: this.state.score + 1});\n            }\n        } else if (this.state.gameIsRunning || this.state.autoPlayIsRunning) {\n            snake.splice(0, 1);\n            this.setState({snake: snake});\n            this.snakeDraw();\n        }\n    }\n\n    boom = (boom) => {\n        let arr = this.state.fieldXxY;\n        let x = +boom.split('-')[1];\n        let y = +boom.split('-')[0];\n        arr[y][x] = 5;\n        this.setState({fieldXxY: arr});\n        let i = 1;\n        \n        this.playSound(this.state.audioExp);\n\n        let arr2 = this.state.fieldXxY;\n        while (i < this.state.snake.length) { \n            var food_x = Math.floor(Math.random() * this.state.fieldX);\n            var food_y = Math.floor(Math.random() * this.state.fieldY);\n            if (arr2[food_y][food_x] === 0) {\n                arr2[food_y][food_x] = 4;\n            }\n            i++;\n        }\n\n        arr2 = this.state.fieldXxY.map((item) => {\n            const i = item;\n            return (\n                i.map((subitem) => {\n                    return (\n                        subitem === 1 ? 0 : subitem\n                    )\n                })\n            )\n        })\n        this.setState({fieldXxY: arr2});\n    }\n\n    finishTheGame = () => {\n        let arr = this.state.fieldXxY.map((item) => {\n            const i = item;\n            return (\n                i.map((subitem) => {\n                    return (\n                        subitem === 1 ? 4 : subitem\n                    )\n                })\n            )\n        })\n        this.setState({fieldXxY: arr});\n        \n        this.setState({gameIsRunning: false});\n        this.setState({gameIsOver: true});\n\n        clearInterval(this.state.snakeTimer);\n        clearInterval(this.state.obstacleTimer);\n        clearInterval(this.state.noObstacleTimer);\n    }\n\n    finAudio = () => {\n        this.playSound(this.state.audioLose);\n    }\n\n    fieldSizeChanged = (e) => {\n        this.setState({fieldX: +e.target.value.split('x')[0]});\n        this.setState({fieldY: +e.target.value.split('x')[1]});\n    }\n\n    soundCheckHandler = (e) => {\n        if (!this.state.isSound) {\n            this.playSound(this.state.audioBut);\n        }\n        this.setState({isSound: e})\n    }\n\n    wallsCheckHandler = (e) => {\n        this.playSound(this.state.audioBut);\n        document.getElementById(\"game-table\").style.border = e ?'5px solid red' : 'none';\n        this.setState({noWalls: !e});\n    }\n\n    obstaclesCheckHandler = (e) => {\n        this.playSound(this.state.audioBut);\n        this.setState({obstacles: e})\n        if (!e) {\n            this.setState({obstaclesDisap: e})\n        }\n    }\n\n    obstaclesDisapCheckHandler = (e) => {\n        this.playSound(this.state.audioBut);\n        this.setState({obstaclesDisap: e})\n    }\n\n    obstaclesDisappCheckHandler = (e) => {\n        this.setState({obstaclesDisap: !e.target.value})\n    }\n\n    setRadioValue = (e) => {\n        this.playSound(this.state.audioBut);\n        this.setState({radioValue: e})\n        console.log(e);\n        this.setState({fieldX: +e.split('x')[0]});\n        this.setState({fieldY: +e.split('x')[1]});\n    }\n\n    setSnakeSpeed = (e) => {\n        let s = this.state.snakeSpeedInit - (e - 50) * this.state.snakeSpeedInit / 100;\n        \n        this.setState({snakeSpeed: s})\n        this.setState({speedSetting: e});\n    }\n\n    settingsOpen = () => {\n        this.playSound(this.state.audioBut);\n        this.setState({settingsOpen: !this.state.settingsOpen})\n    }\n\n    pauseGame = () => {\n        this.playSound(this.state.audioBut);\n        if(this.state.isPaused) {\n            clearInterval(this.state.snakeTimer);\n            clearInterval(this.state.obstacleTimer);\n            clearInterval(this.state.noObstacleTimer);\n            console.log('paused')\n\n        } else {\n            this.setState({snakeTimer: setInterval(this.move, this.state.snakeSpeed)});        \n            if (this.state.obstacles) {\n                this.setState({obstacleTimer: setInterval(this.createObstacle, this.state.obstacleInt)});\n            }\n            if (this.state.obstaclesDisap) {\n                this.setState({noObstacleTimer: setInterval(this.deleteObstacle, this.state.noObstacleInt)});\n            }\n        }\n\n        this.setState((prevState) => ({ isPaused: !prevState.isPaused }));\n    }\n\n    // startAutoplay = () => {\n    //         this.setState({autoPlayIsRunning: true});\n    //         this.startGame();\n    // }\n\n    startGameClick = () => {\n        // // this.setState({autoPlayIsRunning: false});\n        // clearInterval(this.state.autoplayTimer);\n        // this.setState((prevState) => ({ autoPlayIsRunning: !prevState.autoPlayIsRunning }));\n        \n        this.setState({gameIsRunning: true});\n        this.startGame();\n    }\n\n    render() {\n        const radios = [\n            { name: '10x10', value: '10x10' },\n            { name: '15x15', value: '15x15' },\n            { name: '20x20', value: '20x20' },\n          ];\n\n        return <div className='game'>\n            <div className='snake-field'>\n                <table className={`game-table${this.state.gameIsOver ? '-over' : ''}`} id={`game-table`}>\n                    <tbody>\n                    {\n                        this.state.fieldXxY.map((item, index) => {\n                            return (\n                                <tr key={`r-${index}`} className={`game-table-row row-${index}`}>\n                                    {\n                                        item.map((subitem, i) => {\n                                            return (\n                                                <td key={`c-${i}`} \n                                                    className={`game-table-cell \n                                                    cell-${index}-${i} \n                                                    game-table-cell-status-${subitem}`}\n                                                ></td>\n                                            )\n                                        })\n                                    }\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n            </div>\n            <div className={this.state.FSmodeOn ? 'scores-white' : 'scores-black'}>\n                <span>Hi-Score: {this.state.hiScore}</span><br></br>\n                <span>Score: {this.state.score}</span>\n            </div> \n            <div className=\"game-btns\">\n                <Button variant=\"dark\" onClick={this.startGameClick} className=\"mb-2\">New Game</Button>\n                <Button variant=\"dark\" onClick={this.pauseGame} className=\"mb-2\" disabled={!this.state.gameIsRunning}>{!this.state.isPaused ? 'Resume' : 'Pause'}</Button>\n            </div>\n\n            <Button\n                onClick={() => this.settingsOpen()}\n                aria-controls=\"example-collapse-text\"\n                aria-expanded={this.state.settingsOpen}\n                variant=\"dark\"\n                className=\"mb-2\"\n            >\n                Settings\n            </Button>\n            <Collapse in={this.state.settingsOpen} id=\"settingsGroup\">\n                <div id=\"collapse-settings\" className=\"settingsGroup mb-2\">\n                \n                    <ButtonGroup toggle className=\"mb-2\">\n                        {radios.map((radio, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            type=\"radio\"\n                            variant=\"dark\"\n                            name=\"radio\"\n                            value={radio.value}\n                            checked={this.state.radioValue === radio.value}\n                            onChange={(e) => this.setRadioValue(e.currentTarget.value)}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                        ))}\n                    </ButtonGroup>\n\n                    <span>Speed</span>\n                    <RangeSlider\n                        value={this.state.speedSetting}\n                        onChange={e => this.setSnakeSpeed(e.target.value)}\n                    />\n\n                    <ButtonGroup toggle className=\"mb-2\">\n                        <ToggleButton\n                        type=\"checkbox\"\n                        variant=\"dark\"\n                        checked={this.state.isSound}\n                        value=\"1\"\n                        onChange={(e) => this.soundCheckHandler(e.currentTarget.checked)}\n                        >\n                        Sound\n                        </ToggleButton>\n                    </ButtonGroup>\n\n                    <ButtonGroup toggle className=\"mb-2\">\n                        <ToggleButton\n                        type=\"checkbox\"\n                        variant=\"dark\"\n                        checked={!this.state.noWalls}\n                        value=\"1\"\n                        onChange={(e) => this.wallsCheckHandler(e.currentTarget.checked)}\n                        >\n                        Walls\n                        </ToggleButton>\n                    </ButtonGroup>\n\n                    <ButtonGroup toggle className=\"mb-2\">\n                        <ToggleButton\n                        type=\"checkbox\"\n                        variant=\"dark\"\n                        checked={this.state.obstacles}\n                        value=\"1\"\n                        onChange={(e) => this.obstaclesCheckHandler(e.currentTarget.checked)}\n                        >\n                        Obstacles\n                        </ToggleButton>\n                    </ButtonGroup>\n\n                    <ButtonGroup toggle className=\"mb-2\">\n                        <ToggleButton\n                        type=\"checkbox\"\n                        variant=\"dark\"\n                        checked={this.state.obstaclesDisap}\n                        value=\"1\"\n                        onChange={(e) => this.obstaclesDisapCheckHandler(e.currentTarget.checked)}\n                        >\n                        Obstacles disappearing\n                        </ToggleButton>\n                    </ButtonGroup>\n\n                    <audio className=\"audio-start\">\n                        <source src=\"battle.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-element\">\n                        <source src=\"explosion.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-button\">\n                        <source src=\"button.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-eat\">\n                        <source src=\"eat.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-punch\">\n                        <source src=\"punch.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-bomb\">\n                        <source src=\"bomb.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-food\">\n                        <source src=\"food.mp3\"></source>\n                    </audio>\n                    <audio className=\"audio-lose\">\n                        <source src=\"lose.wav\"></source>\n                    </audio>\n                </div>\n            </Collapse>\n        </div>\n    }\n}","import React from 'react';\n\nimport '../styles/Footer.css';\n\nexport default class Footer extends React.Component {\n    render() {\n        return <div className='footer'>\n            <span>© 2021</span>\n            <a href=\"https://github.com/zavyalovdmitry\">zavyalovdmitry</a>\n            <span>for</span>\n            <a href=\"https://rs.school/js/\"><img src=\"https://rs.school/images/rs_school_js.svg\" alt=\"rsschool\" height=\"20\"></img></a>\n        </div>\n    }\n}","import React, {useState} from \"react\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\n\nimport '../styles/App.css';\n\nimport Header from './Header.jsx';\nimport GameField from './GameField.jsx';\nimport Footer from './Footer.jsx';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function App() {\n  const handle = useFullScreenHandle();\n  const [fsMode, fsModeSet] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Header />\n        <FullScreen handle={handle} className='FS'>\n          <GameField fsMode={fsMode} fullscreen={handle.enter}/>\n        </FullScreen>\n      <Footer />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}